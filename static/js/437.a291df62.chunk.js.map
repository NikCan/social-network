{"version":3,"file":"static/js/437.a291df62.chunk.js","mappings":"gLACA,G,QAAkC,kCAAlC,EAAiF,6BAAjF,EAA4H,6BAA5H,EAAqM,0BAArM,EAA4O,4B,SCO/NA,EAAU,SAACC,GACpB,OAAO,yBACFA,EAAMC,Q,UCFFC,EAAa,SAACF,GACvB,OAAO,0BACH,SAAC,KAAD,CAASG,GAAI,YAAcH,EAAMI,GAAjC,SAAsCJ,EAAMK,U,uCCFvCC,GAAiBC,EAAAA,EAAAA,GAAmC,CAACC,KAAM,wBAA1CD,EAC7B,YAAwE,IAAtEE,EAAqE,EAArEA,MAAOC,EAA8D,EAA9DA,aAOR,OAAO,kBAAMC,SANS,WACpBF,IAEAC,KAGK,WACL,0BACE,SAACE,EAAA,EAAD,CAAOC,MAAO,CAACC,MAAO,QAASC,OAAQ,SAAUC,UAAWC,EAAAA,EAAaZ,KAAM,iBACxEa,YAAa,qBACbC,WAAY,gBAErB,0BACE,mBAAQC,UAAWC,EAAAA,EAAAA,OAAnB,0B,wECfAC,EAAkB,SAACC,GAAD,MAA4C,CAClEC,OAAQD,EAAME,KAAKD,SCWrB,IAYA,GAAeE,EAAAA,EAAAA,KACbC,EAAAA,EAAAA,KAbsB,SAACJ,GAA2C,IAAD,EACjE,MAAO,CACLK,YAAaL,EAAMK,YACnBvB,KAAI,UAAEkB,EAAMM,YAAYC,eAApB,aAAE,EAA2BC,aAGV,SAACC,GAC1B,MAAO,CACLC,YAAa,SAACC,EAAY7B,GAAb,OAAsB2B,GAASG,EAAAA,EAAAA,GAAyBD,EAAW7B,UDhB7E,SAA6B+B,GASlC,OAFmCT,EAAAA,EAAAA,IAAQL,EAARK,EANT,SAAC3B,GACzB,IAAOwB,EAAwBxB,EAAxBwB,OAAWa,GAAlB,OAA+BrC,EAA/B,GACA,OAAKwB,GACE,SAACY,GAAD,UAAeC,KADF,SAAC,KAAD,CAAUlC,GAAI,gBCiBtC,ECxBuB,SAAC,GAAwD,IAAvDyB,EAAsD,EAAtDA,YAAaK,EAAyC,EAAzCA,YAAa5B,EAA4B,EAA5BA,KAC3CiC,EAAkBV,EAAYW,QACjCC,KAAI,SAACC,EAAQC,GAAT,OAAmB,SAACxC,EAAD,CAAYG,KAAMoC,EAAOpC,KAAMD,GAAIqC,EAAOrC,IAASsC,MAEvEC,EAAmBf,EAAYgB,SAClCJ,KAAI,SAACK,EAASH,GAAV,OAAoB,SAAC3C,EAAD,CAASE,KAAM4C,EAAQ5C,KAAMG,GAAIyC,EAAQzC,IAASsC,MAK7E,OAAO,iBAAKtB,UAAWC,EAAhB,WACL,SAAC,KAAD,CAAWyB,MAAO,cAClB,iBAAK1B,UAAWC,EAAhB,WACE,gBAAKD,UAAWC,EAAhB,SACGiB,KAEH,gBAAKlB,UAAWC,EAAhB,SACGsB,QAGL,gBAAKvB,UAAWC,EAAhB,UACE,SAACf,EAAD,CAAgBK,SAdE,SAACoC,GACrBd,EAAYc,EAAOC,eAAgB3C","sources":["webpack://social-network/./src/components/Dialogs/Dialogs.module.css?1b2e","components/Dialogs/Message/Message.tsx","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/AddMessageForm.tsx","hocs/withAuthRedirect.tsx","components/Dialogs/DialogsContainer.tsx","components/Dialogs/Dialogs.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogContainer\":\"Dialogs_dialogContainer__12z+U\",\"dialogBlock\":\"Dialogs_dialogBlock__F-ZnY\",\"dialogItems\":\"Dialogs_dialogItems__0Md-i\",\"dialog\":\"Dialogs_dialog__nhCha\",\"messages\":\"Dialogs_messages__fIGII\",\"addMessage\":\"Dialogs_addMessage__drAMO\"};","import React from \"react\";\r\nimport s from \"./../Message.module.css\"\r\n\r\ntype MessagePropsType = {\r\n    text: string\r\n    id: string\r\n}\r\n\r\nexport const Message = (props: MessagePropsType) => {\r\n    return <div>\r\n        {props.text}\r\n    </div>\r\n}\r\n\r\n","import React from \"react\";\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\ntype DialogItemPropsType = {\r\n    name: string\r\n    id: string\r\n}\r\n\r\nexport const DialogItem = (props: DialogItemPropsType) => {\r\n    return <div>\r\n        <NavLink to={\"/dialogs/\" + props.id}>{props.name}</NavLink>\r\n    </div>\r\n}\r\n","import {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport React from \"react\";\r\nimport {FormControl} from \"components/common/FormsControls/FormsControls\";\r\nimport s from '../Profile/ProfileInfo/ProfileInfo.module.css'\r\n\r\nexport type AddMessageFormPropsType = {\r\n  newMessageBody: string\r\n}\r\nexport const AddMessageForm = reduxForm<AddMessageFormPropsType>({form: 'dialogAddMessageForm'})\r\n(({reset, handleSubmit}: InjectedFormProps<AddMessageFormPropsType>) => {\r\n  const submitHandler = () => {\r\n    reset()\r\n    // @ts-ignore\r\n    handleSubmit()\r\n  }\r\n\r\n  return <form onSubmit={submitHandler}>\r\n    <div>\r\n      <Field style={{width: '300px', height: '100px'}} component={FormControl} name={\"newMessageBody\"}\r\n             placeholder={\"Enter your message\"}\r\n             typeofform={\"textarea\"}/>\r\n    </div>\r\n    <div>\r\n      <button className={s.button}>Send</button>\r\n    </div>\r\n  </form>\r\n})","import {Redirect} from \"react-router-dom\";\r\nimport React, {ComponentType} from \"react\";\r\nimport {stateType} from \"redux/store\";\r\nimport {connect} from \"react-redux\";\r\n\r\ntype mapStateToPropsType = {\r\n  isAuth: boolean\r\n}\r\nconst mapStateToProps = (state: stateType): mapStateToPropsType => ({\r\n  isAuth: state.auth.isAuth\r\n})\r\n\r\nexport function withAuthRedirect<T>(Component: ComponentType<T>) {\r\n  const RedirectComponent = (props: mapStateToPropsType) => {\r\n    const {isAuth, ...restProps} = props\r\n    if (!isAuth) return <Redirect to={'/login'}/>\r\n    return <Component {...restProps as T}/>\r\n  }\r\n\r\n  const ConnectedRedirectComponent = connect(mapStateToProps)(RedirectComponent)\r\n\r\n  return ConnectedRedirectComponent\r\n}\r\n","import React, {ComponentType} from \"react\";\r\nimport {\r\n  dialogsPageType,\r\n  sendMessageActionCreator,\r\n} from \"../../redux/dialogs-reducer\";\r\nimport {Dialogs} from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {stateType} from \"../../redux/store\";\r\nimport {compose, Dispatch} from \"redux\";\r\nimport {withAuthRedirect} from \"../../hocs/withAuthRedirect\";\r\n\r\ntype mapStateToPropsType = {\r\n  dialogsPage: dialogsPageType,\r\n  name: string\r\n}\r\ntype mapDispatchToPropsType = {\r\n  sendMessage: (newMessage: string, name: string) => void\r\n}\r\nexport type DialogsPropsType = mapStateToPropsType & mapDispatchToPropsType\r\n\r\nconst mapStateToProps = (state: stateType): mapStateToPropsType => {\r\n  return {\r\n    dialogsPage: state.dialogsPage,\r\n    name: state.profilePage.profile?.fullName as string\r\n  }\r\n}\r\nconst mapDispatchToProps = (dispatch: Dispatch): mapDispatchToPropsType => {\r\n  return {\r\n    sendMessage: (newMessage, name) => dispatch(sendMessageActionCreator(newMessage,name))\r\n  }\r\n}\r\n\r\nexport default compose<ComponentType>(\r\n  connect(mapStateToProps, mapDispatchToProps),\r\n  withAuthRedirect\r\n)(Dialogs)","import React from \"react\";\r\nimport s from \"./Dialogs.module.css\"\r\nimport {Message} from \"./Message/Message\";\r\nimport {DialogItem} from \"./DialogItem/DialogItem\";\r\nimport {DialogsPropsType} from \"./DialogsContainer\";\r\nimport {AddMessageForm, AddMessageFormPropsType} from \"./AddMessageForm\";\r\nimport {Separator} from \"components/common\";\r\n\r\nexport const Dialogs = ({dialogsPage, sendMessage, name}: DialogsPropsType) => {\r\n  const dialogsElements = dialogsPage.dialogs\r\n    .map((dialog, index) => <DialogItem name={dialog.name} id={dialog.id} key={index}/>)\r\n\r\n  const messagesElements = dialogsPage.messages\r\n    .map((message, index) => <Message text={message.text} id={message.id} key={index}/>)\r\n\r\n  const addNewMessage = (values: AddMessageFormPropsType) => {\r\n    sendMessage(values.newMessageBody, name)\r\n  }\r\n  return <div className={s.dialogContainer}>\r\n    <Separator title={'Messages'}/>\r\n    <div className={s.dialogBlock}>\r\n      <div className={s.dialogItems}>\r\n        {dialogsElements}\r\n      </div>\r\n      <div className={s.messages}>\r\n        {messagesElements}\r\n      </div>\r\n    </div>\r\n    <div className={s.addMessage}>\r\n      <AddMessageForm onSubmit={addNewMessage}/>\r\n    </div>\r\n  </div>\r\n}\r\n\r\n"],"names":["Message","props","text","DialogItem","to","id","name","AddMessageForm","reduxForm","form","reset","handleSubmit","onSubmit","Field","style","width","height","component","FormControl","placeholder","typeofform","className","s","mapStateToProps","state","isAuth","auth","compose","connect","dialogsPage","profilePage","profile","fullName","dispatch","sendMessage","newMessage","sendMessageActionCreator","Component","restProps","dialogsElements","dialogs","map","dialog","index","messagesElements","messages","message","title","values","newMessageBody"],"sourceRoot":""}