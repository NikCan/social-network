{"version":3,"file":"static/js/437.6d5679b6.chunk.js","mappings":"gLACA,G,QAAkC,kCAAlC,EAAiF,6BAAjF,EAA4H,6BAA5H,EAAqM,0BAArM,EAA4O,4B,SCM/NA,EAAU,SAACC,GACpB,OAAO,yBACFA,EAAMC,Q,UCFFC,EAAa,SAAC,GAAiC,IAAhCC,EAA+B,EAA/BA,KACxB,OAAO,0BACH,SAAC,KAAD,CAASC,GAAI,YAAcD,EAA3B,SAAkCA,O,uCCD7BE,GAAiBC,EAAAA,EAAAA,GAAmC,CAACC,KAAM,wBAA1CD,EAC7B,YAAwE,IAAtEE,EAAqE,EAArEA,MAAOC,EAA8D,EAA9DA,aAQR,OAAO,kBAAMC,SAPS,SAACC,GACrBA,EAAEC,iBACFJ,IAEAC,KAGK,WACL,0BACE,SAACI,EAAA,EAAD,CAAOC,MAAO,CAACC,MAAO,QAASC,OAAQ,SAAUC,UAAWC,EAAAA,GAAaf,KAAM,iBACxEgB,YAAa,qBACbC,WAAY,gBAErB,0BACE,mBAAQC,UAAWC,EAAAA,EAAAA,OAAnB,0B,8DChBAC,EAAkB,SAACC,GAAD,MAA4C,CAClEC,OAAQD,EAAME,KAAKD,SCWrB,IAYA,GAAeE,EAAAA,EAAAA,KACbC,EAAAA,EAAAA,KAbsB,SAACJ,GACvB,MAAO,CACLK,YAAaL,EAAMK,YACnB1B,KAAMqB,EAAME,KAAKI,UAGM,SAACC,GAC1B,MAAO,CACLC,YAAa,SAACC,EAAY9B,GAAb,OAAsB4B,GAASG,EAAAA,EAAAA,GAAyBD,EAAW9B,UDhB7E,SAA6BgC,GASlC,OAFmCP,EAAAA,EAAAA,IAAQL,EAARK,EANT,SAAC5B,GACzB,IAAOyB,EAAwBzB,EAAxByB,OAAWW,GAAlB,OAA+BpC,EAA/B,GACA,OAAKyB,GACE,SAACU,GAAD,UAAeC,KADF,SAAC,KAAD,CAAUhC,GAAI,gBCiBtC,ECxBuB,SAAC,GAAwD,IAAvDyB,EAAsD,EAAtDA,YAAaG,EAAyC,EAAzCA,YAAa7B,EAA4B,EAA5BA,KAC3CkC,EAAkBR,EAAYS,QACjCC,KAAI,SAAAC,GAAM,OAAI,SAACtC,EAAD,CAAYC,KAAMqC,EAAOrC,MAAWqC,EAAOC,OAEtDC,EAAmBb,EAAYc,SAClCJ,KAAI,SAAAK,GAAO,OAAI,SAAC7C,EAAD,CAASE,KAAM2C,EAAQ3C,KAAMwC,GAAIG,EAAQH,IAASG,EAAQH,OAK5E,OAAO,iBAAKpB,UAAWC,EAAhB,WACL,SAAC,KAAD,CAAWuB,MAAO,cAClB,iBAAKxB,UAAWC,EAAhB,WACE,gBAAKD,UAAWC,EAAhB,SACGe,KAEH,gBAAKhB,UAAWC,EAAhB,SACGoB,QAGL,gBAAKrB,UAAWC,EAAhB,UACE,SAACjB,EAAD,CAAgBK,SAdE,SAACoC,GACrBd,EAAYc,EAAOC,eAAgB5C","sources":["webpack://social-network/./src/components/Dialogs/Dialogs.module.css?1b2e","components/Dialogs/Message/Message.tsx","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/AddMessageForm.tsx","hocs/withAuthRedirect.tsx","components/Dialogs/DialogsContainer.tsx","components/Dialogs/Dialogs.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogContainer\":\"Dialogs_dialogContainer__12z+U\",\"dialogBlock\":\"Dialogs_dialogBlock__F-ZnY\",\"dialogItems\":\"Dialogs_dialogItems__0Md-i\",\"dialog\":\"Dialogs_dialog__nhCha\",\"messages\":\"Dialogs_messages__fIGII\",\"addMessage\":\"Dialogs_addMessage__drAMO\"};","import React from \"react\";\r\n\r\ntype MessagePropsType = {\r\n    text: string\r\n    id: string\r\n}\r\n\r\nexport const Message = (props: MessagePropsType) => {\r\n    return <div>\r\n        {props.text}\r\n    </div>\r\n}\r\n\r\n","import React from \"react\";\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\ntype DialogItemPropsType = {\r\n    name: string\r\n}\r\n\r\nexport const DialogItem = ({name}: DialogItemPropsType) => {\r\n    return <div>\r\n        <NavLink to={\"/dialogs/\" + name}>{name}</NavLink>\r\n    </div>\r\n}\r\n","import {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport React, {FormEvent} from \"react\";\r\nimport {FormControl} from \"components/common\";\r\nimport s from '../Profile/ProfileInfo/ProfileInfo.module.css'\r\n\r\nexport type AddMessageFormPropsType = {\r\n  newMessageBody: string\r\n}\r\nexport const AddMessageForm = reduxForm<AddMessageFormPropsType>({form: 'dialogAddMessageForm'})\r\n(({reset, handleSubmit}: InjectedFormProps<AddMessageFormPropsType>) => {\r\n  const submitHandler = (e:FormEvent<HTMLFormElement>) => {\r\n    e.preventDefault()\r\n    reset()\r\n    // @ts-ignore\r\n    handleSubmit()\r\n  }\r\n\r\n  return <form onSubmit={submitHandler}>\r\n    <div>\r\n      <Field style={{width: '300px', height: '100px'}} component={FormControl} name={\"newMessageBody\"}\r\n             placeholder={\"Enter your message\"}\r\n             typeofform={\"textarea\"}/>\r\n    </div>\r\n    <div>\r\n      <button className={s.button}>Send</button>\r\n    </div>\r\n  </form>\r\n})","import {Redirect} from \"react-router-dom\";\r\nimport React, {ComponentType} from \"react\";\r\nimport {stateType} from \"redux/store\";\r\nimport {connect} from \"react-redux\";\r\n\r\ntype mapStateToPropsType = {\r\n  isAuth: boolean\r\n}\r\nconst mapStateToProps = (state: stateType): mapStateToPropsType => ({\r\n  isAuth: state.auth.isAuth\r\n})\r\n\r\nexport function withAuthRedirect<T>(Component: ComponentType<T>) {\r\n  const RedirectComponent = (props: mapStateToPropsType) => {\r\n    const {isAuth, ...restProps} = props\r\n    if (!isAuth) return <Redirect to={'/login'}/>\r\n    return <Component {...restProps as T}/>\r\n  }\r\n\r\n  const ConnectedRedirectComponent = connect(mapStateToProps)(RedirectComponent)\r\n\r\n  return ConnectedRedirectComponent\r\n}\r\n","import React, {ComponentType} from \"react\";\r\nimport {\r\n  dialogsPageType,\r\n  sendMessageActionCreator,\r\n} from \"../../redux/dialogs-reducer\";\r\nimport {Dialogs} from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {stateType} from \"../../redux/store\";\r\nimport {compose, Dispatch} from \"redux\";\r\nimport {withAuthRedirect} from \"../../hocs/withAuthRedirect\";\r\n\r\ntype mapStateToPropsType = {\r\n  dialogsPage: dialogsPageType,\r\n  name: string\r\n}\r\ntype mapDispatchToPropsType = {\r\n  sendMessage: (newMessage: string, name: string) => void\r\n}\r\nexport type DialogsPropsType = mapStateToPropsType & mapDispatchToPropsType\r\n\r\nconst mapStateToProps = (state: stateType): mapStateToPropsType => {\r\n  return {\r\n    dialogsPage: state.dialogsPage,\r\n    name: state.auth.login as string\r\n  }\r\n}\r\nconst mapDispatchToProps = (dispatch: Dispatch): mapDispatchToPropsType => {\r\n  return {\r\n    sendMessage: (newMessage, name) => dispatch(sendMessageActionCreator(newMessage,name))\r\n  }\r\n}\r\n\r\nexport default compose<ComponentType>(\r\n  connect(mapStateToProps, mapDispatchToProps),\r\n  withAuthRedirect\r\n)(Dialogs)","import React from \"react\";\r\nimport s from \"./Dialogs.module.css\"\r\nimport {Message} from \"./Message/Message\";\r\nimport {DialogItem} from \"./DialogItem/DialogItem\";\r\nimport {DialogsPropsType} from \"./DialogsContainer\";\r\nimport {AddMessageForm, AddMessageFormPropsType} from \"./AddMessageForm\";\r\nimport {Separator} from \"components/common\";\r\n\r\nexport const Dialogs = ({dialogsPage, sendMessage, name}: DialogsPropsType) => {\r\n  const dialogsElements = dialogsPage.dialogs\r\n    .map(dialog => <DialogItem name={dialog.name} key={dialog.id}/>)\r\n\r\n  const messagesElements = dialogsPage.messages\r\n    .map(message => <Message text={message.text} id={message.id} key={message.id}/>)\r\n\r\n  const addNewMessage = (values: AddMessageFormPropsType) => {\r\n    sendMessage(values.newMessageBody, name)\r\n  }\r\n  return <div className={s.dialogContainer}>\r\n    <Separator title={'Messages'}/>\r\n    <div className={s.dialogBlock}>\r\n      <div className={s.dialogItems}>\r\n        {dialogsElements}\r\n      </div>\r\n      <div className={s.messages}>\r\n        {messagesElements}\r\n      </div>\r\n    </div>\r\n    <div className={s.addMessage}>\r\n      <AddMessageForm onSubmit={addNewMessage}/>\r\n    </div>\r\n  </div>\r\n}\r\n\r\n"],"names":["Message","props","text","DialogItem","name","to","AddMessageForm","reduxForm","form","reset","handleSubmit","onSubmit","e","preventDefault","Field","style","width","height","component","FormControl","placeholder","typeofform","className","s","mapStateToProps","state","isAuth","auth","compose","connect","dialogsPage","login","dispatch","sendMessage","newMessage","sendMessageActionCreator","Component","restProps","dialogsElements","dialogs","map","dialog","id","messagesElements","messages","message","title","values","newMessageBody"],"sourceRoot":""}