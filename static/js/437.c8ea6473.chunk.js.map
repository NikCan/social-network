{"version":3,"file":"static/js/437.c8ea6473.chunk.js","mappings":"gLACA,G,QAA0B,0BAA1B,EAAiE,6BAAjE,EAA2K,0B,SCO9JA,EAAU,SAACC,GACpB,OAAO,yBACFA,EAAMC,Q,UCDFC,EAAa,SAACF,GACvB,OAAO,0BACH,SAAC,KAAD,CAASG,GAAI,YAAcH,EAAMI,GAAjC,SAAsCJ,EAAMK,U,uCCH9CC,GAAcC,EAAAA,EAAAA,GAAiB,IACxBC,GAAiBC,EAAAA,EAAAA,GAAmC,CAACC,KAAM,wBAA1CD,EAC7B,SAACT,GACE,OAAO,kBAAMW,SAAUX,EAAMY,aAAtB,WACH,0BACI,SAACC,EAAA,EAAD,CAAOC,UAAWC,EAAAA,EAAaV,KAAM,iBAAkBW,YAAa,qBAC7DC,SAAU,CAACC,EAAAA,EAAUZ,GAAca,WAAY,gBAE1D,0BACI,6C,8DCTNC,EAAkB,SAACC,GAAD,MAA4C,CAClEC,OAAQD,EAAME,KAAKD,SCUrB,IAWA,GAAeE,EAAAA,EAAAA,KACXC,EAAAA,EAAAA,KAZoB,SAACJ,GACrB,MAAO,CACHK,YAAaL,EAAMK,gBAGA,SAACC,GACxB,MAAO,CACHC,YAAa,SAACC,GAAD,OAAgBF,GAASG,EAAAA,EAAAA,GAAyBD,UDdhE,SAA6BE,GASlC,OAFmCN,EAAAA,EAAAA,IAAQL,EAARK,EANT,SAACzB,GACzB,IAAOsB,EAAwBtB,EAAxBsB,OAAWU,GAAlB,OAA+BhC,EAA/B,GACA,OAAKsB,GACE,SAACS,GAAD,UAAeC,KADF,SAAC,KAAD,CAAU7B,GAAI,gBCetC,ECvBuB,SAACH,GACpB,IAAMiC,EAAkBjC,EAAM0B,YAAYQ,QACrCC,KAAI,SAACC,EAAQC,GAAT,OAAmB,SAACnC,EAAD,CAAYG,KAAM+B,EAAO/B,KAAMD,GAAIgC,EAAOhC,IAASiC,MAEzEC,EAAmBtC,EAAM0B,YAAYa,SACtCJ,KAAI,SAACK,EAASH,GAAV,OAAoB,SAACtC,EAAD,CAASE,KAAMuC,EAAQvC,KAAMG,GAAIoC,EAAQpC,IAASiC,MAK/E,OAAO,iBAAKI,UAAWC,EAAhB,WACH,gBAAKD,UAAWC,EAAhB,SACKT,KAEL,iBAAKQ,UAAWC,EAAhB,UACKJ,GACD,SAAC9B,EAAD,CAAgBG,SATF,SAACgC,GACnB3C,EAAM4B,YAAYe,EAAOC","sources":["webpack://social-network/./src/components/Dialogs/Dialogs.module.css?1b2e","components/Dialogs/Message/Message.tsx","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/AddMessageForm.tsx","hocs/withAuthRedirect.tsx","components/Dialogs/DialogsContainer.tsx","components/Dialogs/Dialogs.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__8OmwD\",\"dialogItems\":\"Dialogs_dialogItems__0Md-i\",\"active\":\"Dialogs_active__2ReW+\",\"dialog\":\"Dialogs_dialog__nhCha\",\"messages\":\"Dialogs_messages__fIGII\",\"message\":\"Dialogs_message__YnJly\"};","import React from \"react\";\r\nimport s from \"./../Message.module.css\"\r\n\r\ntype MessagePropsType = {\r\n    text: string\r\n    id: string\r\n}\r\n\r\nexport const Message = (props: MessagePropsType) => {\r\n    return <div>\r\n        {props.text}\r\n    </div>\r\n}\r\n\r\n","import React from \"react\";\r\nimport s from \"./../Dialogs.module.css\"\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\ntype DialogItemPropsType = {\r\n    name: string\r\n    id: string\r\n}\r\n\r\nexport const DialogItem = (props: DialogItemPropsType) => {\r\n    return <div>\r\n        <NavLink to={\"/dialogs/\" + props.id}>{props.name}</NavLink>\r\n    </div>\r\n}\r\n","import {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport React from \"react\";\r\nimport {FormControl} from \"../common/FormsControls/FormsControls\";\r\nimport {maxLengthCreator, required} from \"../../utils/validators/validator\";\r\n\r\nexport type AddMessageFormPropsType = {\r\n    newMessageBody: string\r\n}\r\nconst maxLength15 = maxLengthCreator(15)\r\nexport const AddMessageForm = reduxForm<AddMessageFormPropsType>({form: 'dialogAddMessageForm'})\r\n((props: InjectedFormProps<AddMessageFormPropsType>) => {\r\n    return <form onSubmit={props.handleSubmit}>\r\n        <div>\r\n            <Field component={FormControl} name={\"newMessageBody\"} placeholder={\"Enter your message\"}\r\n                   validate={[required, maxLength15]} typeofform={\"textarea\"}/>\r\n        </div>\r\n        <div>\r\n            <button>Send</button>\r\n        </div>\r\n    </form>\r\n})","import {Redirect} from \"react-router-dom\";\r\nimport React, {ComponentType} from \"react\";\r\nimport {stateType} from \"../redux/redux-store\";\r\nimport {connect} from \"react-redux\";\r\n\r\ntype mapStateToPropsType = {\r\n  isAuth: boolean\r\n}\r\nconst mapStateToProps = (state: stateType): mapStateToPropsType => ({\r\n  isAuth: state.auth.isAuth\r\n})\r\n\r\nexport function withAuthRedirect<T>(Component: ComponentType<T>) {\r\n  const RedirectComponent = (props: mapStateToPropsType) => {\r\n    const {isAuth, ...restProps} = props\r\n    if (!isAuth) return <Redirect to={'/login'}/>\r\n    return <Component {...restProps as T}/>\r\n  }\r\n\r\n  const ConnectedRedirectComponent = connect(mapStateToProps)(RedirectComponent)\r\n\r\n  return ConnectedRedirectComponent\r\n}\r\n","import React, {ComponentType} from \"react\";\r\nimport {\r\n    dialogsPageType,\r\n    sendMessageActionCreator,\r\n} from \"../../redux/dialogs-reducer\";\r\nimport {Dialogs} from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {stateType} from \"../../redux/redux-store\";\r\nimport {compose, Dispatch} from \"redux\";\r\nimport {withAuthRedirect} from \"../../hocs/withAuthRedirect\";\r\n\r\ntype mapStateToPropsType = {\r\n    dialogsPage: dialogsPageType\r\n}\r\ntype mapDispatchToPropsType = {\r\n    sendMessage: (newMessage: string) => void\r\n}\r\nexport type DialogsPropsType = mapStateToPropsType & mapDispatchToPropsType\r\n\r\nconst mapStateToProps = (state: stateType): mapStateToPropsType => {\r\n    return {\r\n        dialogsPage: state.dialogsPage,\r\n    }\r\n}\r\nconst mapDispatchToProps = (dispatch: Dispatch): mapDispatchToPropsType => {\r\n    return {\r\n        sendMessage: (newMessage) => dispatch(sendMessageActionCreator(newMessage))\r\n    }\r\n}\r\n\r\nexport default compose<ComponentType>(\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n    withAuthRedirect\r\n)(Dialogs)","import React from \"react\";\r\nimport s from \"./Dialogs.module.css\"\r\nimport {Message} from \"./Message/Message\";\r\nimport {DialogItem} from \"./DialogItem/DialogItem\";\r\nimport {DialogsPropsType} from \"./DialogsContainer\";\r\nimport {AddMessageForm, AddMessageFormPropsType} from \"./AddMessageForm\";\r\n\r\nexport const Dialogs = (props: DialogsPropsType) => {\r\n    const dialogsElements = props.dialogsPage.dialogs\r\n        .map((dialog, index) => <DialogItem name={dialog.name} id={dialog.id} key={index}/>)\r\n\r\n    const messagesElements = props.dialogsPage.messages\r\n        .map((message, index) => <Message text={message.text} id={message.id} key={index}/>)\r\n\r\n    const addNewMessage = (values: AddMessageFormPropsType) => {\r\n        props.sendMessage(values.newMessageBody)\r\n    }\r\n    return <div className={s.dialogs}>\r\n        <div className={s.dialogItems}>\r\n            {dialogsElements}\r\n        </div>\r\n        <div className={s.messages}>\r\n            {messagesElements}\r\n            <AddMessageForm onSubmit={addNewMessage}/>\r\n        </div>\r\n    </div>\r\n}\r\n\r\n"],"names":["Message","props","text","DialogItem","to","id","name","maxLength15","maxLengthCreator","AddMessageForm","reduxForm","form","onSubmit","handleSubmit","Field","component","FormControl","placeholder","validate","required","typeofform","mapStateToProps","state","isAuth","auth","compose","connect","dialogsPage","dispatch","sendMessage","newMessage","sendMessageActionCreator","Component","restProps","dialogsElements","dialogs","map","dialog","index","messagesElements","messages","message","className","s","values","newMessageBody"],"sourceRoot":""}